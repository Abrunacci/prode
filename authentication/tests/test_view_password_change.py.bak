"""Unit tests for changing password."""
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth.models import User
from django.contrib.auth import views as auth_views
from django.test import TestCase
from django.urls import resolve
from django.urls import reverse


class PasswordChangeTests(TestCase):
    """Unit tests for changing the password."""

    def setUp(self):
        """Set variables for all tests in class."""
        username = 'john'
        password = 'secret123'
        User.objects.create_user(username=username, email='john@doe.com', password=password)
        url = reverse('password_change')
        self.client.login(username=username, password=password)
        self.response = self.client.get(url)

    def test_status_code(self):
        """Check page is up."""
        self.assertEqual(self.response.status_code, 200)

    def test_url_resolves_correct_view(self):
        """Check view for password change."""
        view = resolve('/auth/settings/password/')
        self.assertEqual(view.func.view_class, auth_views.PasswordChangeView)

    def test_csrf(self):
        """Check for Cross-Site Request Forgery prevention."""
        self.assertContains(self.response, 'csrfmiddlewaretoken')

    def test_contains_form(self):
        """Check form for password change."""
        form = self.response.context.get('form')
        self.assertIsInstance(form, PasswordChangeForm)

    def test_form_inputs(self):
        """Check view has 4 inputs: csrf, old_password, new_password1, new_password2"""
        self.assertContains(self.response, '<input', 4)
        self.assertContains(self.response, 'type="password"', 3)


class LoginRequiredPasswordChangeTests(TestCase):
    """Unit tests for requiring login."""

    def test_redirection(self):
        """Check redirection page."""
        url = reverse('password_change')
        login_url = reverse('login')
        response = self.client.get(url)
        self.assertRedirects(response, f'{login_url}?next={url}')


class PasswordChangeTestCase(TestCase):
    """Unit tests for password change."""

    def setUp(self, data={}):
        """Set variables for all tests in class."""
        self.user = User.objects.create_user(username='john',
                                             email='john@doe.com',
                                             password='old_password')
        self.url = reverse('password_change')
        self.client.login(username='john', password='old_password')
        self.response = self.client.post(self.url, data)


class SuccessfulPasswordChangeTests(PasswordChangeTestCase):
    """Unit tests after sucessfully changing the password."""

    def setUp(self):
        """Set variables for all tests in class."""
        super().setUp({
            'old_password': 'old_password',
            'new_password1': 'new_password',
            'new_password2': 'new_password',
            })

    def test_redirection(self):
        """Check redirection page."""
        self.assertRedirects(self.response, reverse('password_change_done'))

    def test_password_changed(self):
        """Check the password has changed.

        Refresh the user instance from database to get the new password
        hash updated by the change password view.
        """
        self.user.refresh_from_db()
        self.assertTrue(self.user.check_password('new_password'))

    def test_user_authentication(self):
        """Create a new request to an arbitrary page.

        The resulting page should have an `user` to its context, after a successful sign up.
        """
        response = self.client.get(reverse('home'))
        user = response.context.get('user')
        self.assertTrue(user.is_authenticated)


class InvalidPasswordChangeTests(PasswordChangeTestCase):
    """Unit tests after unsucessfully changing the password."""

    def test_status_code(self):
        """Check page is up."""
        self.assertEqual(self.response.status_code, 200)

    def test_form_errors(self):
        """Check for from errors."""
        form = self.response.context.get('form')
        self.assertTrue(form.errors)

    def test_didnt_change_password(self):
        """Refresh user instance from DB to make sure we have the latest data."""
        self.user.refresh_from_db()
        self.assertTrue(self.user.check_password('old_password'))
